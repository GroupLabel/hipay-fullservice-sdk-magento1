version: 2
jobs:
  build:
    docker:
      - image: ubuntu:14.04
    environment:
      TZ: "/usr/share/zoneinfo/Europe/paris"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: apt-get update && apt-get install -y curl wget bzip2 npm python-pip php php7.0-xml sshpass vim
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('SHA384', 'composer-setup.php') === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/local/bin/composer
            chmod a+x /usr/local/bin/composer
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: pip install docker-compose
      - run:
          name: Install PhantomJS
          command: |
            wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2
            tar xvjf phantomjs-2.1.1-linux-x86_64.tar.bz2
            mv phantomjs-2.1.1-linux-x86_64 /bin/
            chmod a+x /bin/phantomjs-2.1.1-linux-x86_64
            ln -s --force /bin/phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin/phantomjs
      - run:
          name: Install CasperJS & JUnit
          command: |
            npm install -g casperjs@1.1.3
            npm install -g junit-viewer
      - run:
          name: Configure Environment File
          command: |
            sed -i -e "s/{HIPAY_API_USER_TEST\}/$HIPAY_API_USER_TEST/" ./bin/conf/stage/hipay.env.sample
            sed -i -e "s/{HIPAY_API_PASSWORD_TEST\}/$HIPAY_API_PASSWORD_TEST/" ./bin/conf/stage/hipay.env.sample
            sed -i -e "s/{HIPAY_TOKENJS_PUBLICKEY_TEST\}/$HIPAY_TOKENJS_PUBLICKEY_TEST/" ./bin/conf/stage/hipay.env.sample
            sed -i -e "s/{HIPAY_TOKENJS_USERNAME_TEST\}/$HIPAY_TOKENJS_USERNAME_TEST/" ./bin/conf/stage/hipay.env.sample
            sed -i -e "s/{HIPAY_SECRET_PASSPHRASE_TEST\}/$HIPAY_SECRET_PASSPHRASE_TEST/" ./bin/conf/stage/hipay.env.sample
            sed -i -e "s/{LOGIN_BACKEND\}/$LOGIN_BACKEND/" ./bin/conf/stage/test.env.sample
            sed -i -e "s/{PASS_BACKEND\}/$PASS_BACKEND/" ./bin/conf/stage/test.env.sample
            sed -i -e "s/{LOGIN_PAYPAL\}/$LOGIN_PAYPAL/" ./bin/conf/stage/test.env.sample
            sed -i -e "s/{PASS_PAYPAL\}/$PASS_PAYPAL/" ./bin/conf/stage/test.env.sample
      - run:
          name: Add vhost
          command: echo 127.0.0.1 local-magento.hipay.com | tee -a /etc/hosts
      - run:
          name: Generate DockerFiles
          command: |
            sh bin/docker/generate_dockerfile.sh
            docker --version
            docker-compose --version
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/php5-6.tar
            - /caches/php7-0.tar
      - run:
          name: Load Docker image PHP 5.6 layer cache
          command: |
            set +o pipefail
            docker load -i /caches/php5-6.tar | true
      - run:    
          name: Build application Docker image PHP 5.6
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.stage.yml build
      - run:
          name: Save Docker image PHP 5.6 layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/php5-6.tar magento1_web_php5_6
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/php5-6.tar
      - run:
          name: Up PHP 5.6 container
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.stage.yml up -d
            echo "Wait 60sec to have ready container" && sleep 60
            curl --retry 30 --retry-delay 3 -v $MAGENTO_URL:$PORT_WEB
            curl --retry 30 --retry-delay 3 -v $URL_MAILCATCHER
      - run:
          name: Launch Tests PHP 5.6
          command: |
            sh bin/tests/casper_run_circle.sh
            junit-viewer --results=bin/tests/result.xml \
              --save=bin/tests/report-php5-6.html --minify=false --contracted
            if [ -d bin/tests/errors/ ]; then
              mkdir $CIRCLE_ARTIFACTS/screenshots/php5-6
              cp bin/tests/errors/* $CIRCLE_ARTIFACTS/screenshots/php5-6
              rm -rf bin/tests/errors/
            fi
      - store_artifacts:
          path: bin/tests/errors/
          prefix: screenshots_php_5_6
      - run:
          name: Stop PHP 5.6 container
          command: |
            docker-compose stop
            docker-compose rm -fv
      - run:
          name: Load Docker image PHP 7.0 layer cache
          command: |
            set +o pipefail
            docker load -i /caches/php7-0.tar | true
      - run:    
          name: Build application Docker image PHP 7.0
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.stage-php7-0.yml build
      - run:
          name: Save Docker image PHP 7.0 layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/php7-0.tar magento1_web_php7_0
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/php7-0.tar
      - run:
          name: Up PHP 7.0 container
          command: |
            docker-compose -f docker-compose.yml -f docker-compose.stage-php7-0.yml up -d
            sleep 60
            curl --retry 30 --retry-delay 3 -v $MAGENTO_URL:$PORT_WEB
      - run:
          name: Launch Tests PHP 7.0
          command: |
            sh bin/tests/casper_run_circle.sh
            junit-viewer --results=bin/tests/result.xml \
              --save=bin/tests/report-php7-0.html --minify=false --contracted
            if [ -d bin/tests/errors/ ]; then
              mkdir $CIRCLE_ARTIFACTS/screenshots/php7-0
              cp bin/tests/errors/* $CIRCLE_ARTIFACTS/screenshots/php7-0
            fi
      - store_artifacts:
          path: bin/tests/errors/
          prefix: screenshots_php_7_0
      - store_artifacts:
          path: bin/tests/report*.html
          prefix: reports
      - run:
          name: Package Extension
          command: |
            mv composer.json.dist composer.json
            sh ./bin/deployment/packaging.sh
      - store_artifacts:
          path: /dist/*.tgz
          prefix: package
      - deploy:
          name: Push module Magento1 to Docker-Machine
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              sh ./bin/deployment/deploy_project.sh
            fi